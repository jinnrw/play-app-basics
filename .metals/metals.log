[0m2021.03.20 23:10:05 INFO  Started: Metals version 0.10.0 in workspace '/Users/Jinn/Projects/play-app-basics/play-app-basics' for client vscode 1.54.3.[0m
[0m2021.03.20 23:10:07 INFO  time: initialize in 1.99s[0m
[0m2021.03.20 23:10:07 WARN  Build server is not auto-connectable.[0m
Mar. 20, 2021 11:13:25 P.M. org.eclipse.lsp4j.jsonrpc.services.GenericEndpoint notify
INFO: Unsupported notification method: $/setTraceNotification
[0m2021.03.20 23:32:33 WARN  no build target for: /Users/Jinn/Projects/play-app-basics/play-app-basics/build.sbt[0m
[0m2021.03.20 23:32:37 INFO  no build target: using presentation compiler with only scala-library: 2.12.13[0m
name := """play-app-basics"""
organization := "jinnwang"

version := "1.0-SNAPSHOT"

lazy val root = (project in file(".")).enablePlugins(PlayScala)

scalaVersion := "2.13.3"

libraryDependencies += guice
libraryDependencies += "org.scalatestplus.play" %% "scalatestplus-play" % "5.0.0" % Test

// Adds additional packages into Twirl
//TwirlKeys.templateImports += "jinnwang.controllers._"

// Adds additional packages into conf/routes
// play.sbt.routes.RoutesKeys.routesImport += "jinnwang.binders._"

[0m2021.03.20 23:32:39 INFO  time: code lens generation in 5.51s[0m
[0m2021.03.21 00:09:23 WARN  no build target for: /Users/Jinn/Projects/play-app-basics/play-app-basics/app/controllers/HomeController.scala[0m
package controllers

import javax.inject._
import play.api._
import play.api.mvc._

/**
 * This controller creates an `Action` to handle HTTP requests to the
 * application's home page.
 */
@Singleton
class HomeController @Inject()(val controllerComponents: ControllerComponents) extends BaseController {

  /**
   * Create an Action to render an HTML page.
   *
   * The configuration in the `routes` file means that this method
   * will be called when the application receives a `GET` request with
   * a path of `/`.
   */
  def index() = Action { implicit request: Request[AnyContent] =>
    Ok(views.html.index())
  }
}

[0m2021.03.21 00:09:27 WARN  no build target for: /Users/Jinn/Projects/play-app-basics/play-app-basics/app/controllers/HomeController.scala[0m
package controllers

import javax.inject._
import play.api._
import play.api.mvc._
import play.api.libs.json._
import play.api.libs.json.Json
import scala.collection.mutable.ListBuffer
import scala.concurrent.{ExecutionContext, Future}

final case class Name(id: String, name: String)

@Singleton
class HomeController @Inject() (val controllerComponents: ControllerComponents)
    extends BaseController {

  private val nameList = ListBuffer(
    Name("1", "Apple"),
    Name("2", "Orange"),
    Name("3", "Kiwi"),
    Name("4", "Watermelon"),
    Name("5", "Banana")
  )

  // Format in order to send as json obj
  implicit val nameFormat =
    Json.format[Name]

  def index() = Action { implicit request: Request[AnyContent] =>
    Ok(views.html.index())
  }

  def ping() = Action { implicit request: Request[AnyContent] =>
    Ok("App is running")
  }

  def getAllNames() = Action { _ =>
    Ok(Json.obj("names" -> nameList))
  }

  def getName(id: Long) = Action { _ =>
    var foundItem: Option[Name] = nameList.find(_.id == id)

    foundItem match {
      case Some(item) =>
        Ok(Json.obj("id" -> s"${item.id}", "name" -> s"${item.name}"))
      case None => NotFound
    }
  }

  // POST
  def addName() = Action.async { implicit request =>
    val body: AnyContent = request.body
    val jsonBody: Option[JsValue] = body.asJson

    jsonBody
      .map { json =>
        Future.successful(
          Ok(Json.obj("names" -> updateNameList(json)))
        )
      }
      .getOrElse {
        Future.successful(BadRequest("Expecting application/json request body"))
      }
  }

  // TODO: id needs to be unique, .length is not reliable
  private def updateNameList(json: JsValue) = {
    val nameString = (json \ "name").as[String]
    var newName =
      Name((nameList.length + 1).toString(), s"${nameString}")
    nameList += newName
  }
}

[0m2021.03.21 00:32:15 WARN  no build target for: /Users/Jinn/Projects/play-app-basics/play-app-basics/app/controllers/HomeController.scala[0m
package controllers

import javax.inject._
import play.api._
import play.api.mvc._
import play.api.libs.json._
import play.api.libs.json.Json
import scala.collection.mutable.ListBuffer
import scala.concurrent.{ExecutionContext, Future}

final case class Name(id: String, name: String)

@Singleton
class HomeController @Inject() (val controllerComponents: ControllerComponents)
    extends BaseController {

  private val nameList = ListBuffer(
    Name("1", "Apple"),
    Name("2", "Orange"),
    Name("3", "Kiwi"),
    Name("4", "Watermelon"),
    Name("5", "Banana")
  )

  // Format in order to send as json obj
  implicit val nameFormat =
    Json.format[Name]

  def index() = Action { implicit request: Request[AnyContent] =>
    Ok(views.html.index())
  }

  def ping() = Action { implicit request: Request[AnyContent] =>
    Ok("App is running")
  }

  def getAllNames() = Action { _ =>
    Ok(Json.obj("names" -> nameList))
  }

  def getName(id: String) = Action { _ =>
    var foundItem: Option[Name] = nameList.find(_.id == id)

    foundItem match {
      case Some(item) =>
        Ok(Json.obj("id" -> s"${item.id}", "name" -> s"${item.name}"))
      case None => NotFound
    }
  }

  // POST
  def addName() = Action.async { implicit request =>
    val body: AnyContent = request.body
    val jsonBody: Option[JsValue] = body.asJson

    jsonBody
      .map { json =>
        Future.successful(
          Ok(Json.obj("names" -> updateNameList(json)))
        )
      }
      .getOrElse {
        Future.successful(BadRequest("Expecting application/json request body"))
      }
  }

  // TODO: id needs to be unique, .length is not reliable
  private def updateNameList(json: JsValue) = {
    val nameString = (json \ "name").as[String]
    var newName =
      Name((nameList.length + 1).toString(), s"${nameString}")
    nameList += newName
  }
}

[0m2021.03.21 00:33:23 WARN  no build target for: /Users/Jinn/Projects/play-app-basics/play-app-basics/app/controllers/HomeController.scala[0m
package controllers

import javax.inject._
import play.api._
import play.api.mvc._
import play.api.libs.json._
import play.api.libs.json.Json
import scala.collection.mutable.ListBuffer
import scala.concurrent.{ExecutionContext, Future}

final case class Name(id: String, name: String)

@Singleton
class HomeController @Inject() (val controllerComponents: ControllerComponents)
    extends BaseController {

  private val nameList = ListBuffer(
    Name("1", "Apple"),
    Name("2", "Orange"),
    Name("3", "Kiwi"),
    Name("4", "Watermelon"),
    Name("5", "Banana")
  )

  // Format in order to send as json obj
  implicit val nameFormat =
    Json.format[Name]

  def index() = Action { implicit request: Request[AnyContent] =>
    Ok(views.html.index())
  }

  def ping() = Action { implicit request: Request[AnyContent] =>
    Ok("App is running!")
  }

  def getAllNames() = Action { _ =>
    Ok(Json.obj("names" -> nameList))
  }

  def getName(id: String) = Action { _ =>
    var foundItem: Option[Name] = nameList.find(_.id == id)

    foundItem match {
      case Some(item) =>
        Ok(Json.obj("id" -> s"${item.id}", "name" -> s"${item.name}"))
      case None => NotFound
    }
  }

  // POST
  def addName() = Action.async { implicit request =>
    val body: AnyContent = request.body
    val jsonBody: Option[JsValue] = body.asJson

    jsonBody
      .map { json =>
        Future.successful(
          Ok(Json.obj("names" -> updateNameList(json)))
        )
      }
      .getOrElse {
        Future.successful(BadRequest("Expecting application/json request body"))
      }
  }

  // TODO: id needs to be unique, .length is not reliable
  private def updateNameList(json: JsValue) = {
    val nameString = (json \ "name").as[String]
    var newName =
      Name((nameList.length + 1).toString(), s"${nameString}")
    nameList += newName
  }
}

[0m2021.03.21 00:34:20 WARN  no build target for: /Users/Jinn/Projects/play-app-basics/play-app-basics/app/controllers/HomeController.scala[0m
[0m2021.03.21 00:34:20 WARN  no build target for: /Users/Jinn/Projects/play-app-basics/play-app-basics/app/controllers/HomeController.scala[0m
[0m2021.03.21 00:35:40 WARN  no build target for: /Users/Jinn/Projects/play-app-basics/play-app-basics/app/controllers/HomeController.scala[0m
[0m2021.03.21 00:35:40 WARN  no build target for: /Users/Jinn/Projects/play-app-basics/play-app-basics/app/controllers/HomeController.scala[0m
[0m2021.03.21 00:35:42 WARN  no build target for: /Users/Jinn/Projects/play-app-basics/play-app-basics/app/controllers/HomeController.scala[0m
[0m2021.03.21 00:35:46 WARN  no build target for: /Users/Jinn/Projects/play-app-basics/play-app-basics/app/controllers/HomeController.scala[0m
package controllers

import javax.inject._
import play.api._
import play.api.mvc._
import play.api.libs.json._
import play.api.libs.json.Json
import scala.collection.mutable.ListBuffer
import scala.concurrent.{ExecutionContext, Future}

final case class Name(id: String, name: String)

@Singleton
class HomeController @Inject() (val controllerComponents: ControllerComponents)
    extends BaseController {

  private val nameList = ListBuffer(
    Name("1", "Apple"),
    Name("2", "Orange"),
    Name("3", "Kiwi"),
    Name("4", "Watermelon"),
    Name("5", "Banana")
  )

  // Format in order to send as json obj
  implicit val nameFormat =
    Json.format[Name]

  def index() = Action { implicit request: Request[AnyContent] =>
    Ok(views.html.index())
  }

  def ping() = Action { implicit request: Request[AnyContent] =>
    Ok("App is running!")
  }

  def getAllNames() = Action { _ =>
    Ok(Json.obj("names" -> nameList))
  }

  def getName(id: String) = Action { _ =>
    var foundItem: Option[Name] = nameList.find(_.id == id)

    foundItem match {
      case Some(item) =>
        Ok(Json.obj("id" -> s"${item.id}", "name" -> s"${item.name}"))
      case None => NotFound
    }
  }

  // POST
  def addName() = Action.async { implicit request =>
    val body: AnyContent = request.body
    val jsonBody: Option[JsValue] = body.asJson

    jsonBody
      .map { json =>
        Future.successful(
          Ok(Json.obj("names" -> updateNameList(json)))
        )
      }
      .getOrElse {
        Future.successful(BadRequest("Expecting application/json request body"))
      }
  }

  // TODO: id needs to be unique, .length is not reliable
  private def updateNameList(json: JsValue) = {
    val nameString = (json \ "name").as[String]
    var newName =
      Name((nameList.length + 1).toString(), s"${nameString}")
    nameList += newName
  }
}

[0m2021.03.21 00:50:09 WARN  no build target for: /Users/Jinn/Projects/play-app-basics/play-app-basics/build.sbt[0m
Mar. 21, 2021 12:51:01 A.M. org.eclipse.lsp4j.jsonrpc.RemoteEndpoint handleCancellation
WARNING: Unmatched cancel notification for request id 160
